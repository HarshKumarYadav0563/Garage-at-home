You are a React + Wouter (frontend) + Express (backend) engineer.
Redesign the booking flow for Garage At Home so that AFTER selecting services, the next steps are:
1) Location detection,
2) Filling details,
3) Booking & OTP verification,
4) Tracking (no manual slot booking, slot assignment is automatic).

────────────────────────
FRONTEND (React + Wouter)
────────────────────────
Tech
- React + Vite (TypeScript)
- Wouter for routing
- TailwindCSS (dark theme)
- Framer Motion (animations)
- Zustand for state
- React Hook Form + Zod for forms

Routes
- `/services/:vehicle/:city`
  - vehicle ∈ {bike, car}
  - city ∈ {delhi, gurugram, noida, ghaziabad, faridabad}
- `/track/:trackingId`

State (Zustand)
- vehicle, city
- services[] (selected)
- addons[]
- customer { name, phone, email?, contactPref }
- address { text, lat?, lng?, pincode? }
- otp { phone, sessionId?, verified }
- estTotal {min,max}
- actions: addService, removeService, setCustomer, setAddress, clear, hydrate

Flow
STEP 1 – Select Services
- Service cards above fold
- Cart FAB with count & est total
- CTA: Continue → Location

STEP 2 – Location Detection
- “Use My Location” → geolocation → reverse geocode
- Or manual address + pincode
- City must be NCR; else show Waitlist modal
- CTA: Continue → Details

STEP 3 – Fill Details
- Form (React Hook Form + Zod):
  - Name (2–60), phone (India regex), email? optional, contactPref
- Show address (from step 2)
- CTA: Continue → OTP

STEP 4 – OTP Verification & Booking
- On continue → call backend POST /api/otp/send
- Show OTP input (6-digit, auto-focus, resend timer)
- Verify via /api/otp/verify
- If verified → create lead via POST /api/leads
- Server assigns slot automatically (no slot picker)
- Response: { trackingId }
- Navigate to `/track/:trackingId`

STEP 5 – Tracking
- /track/:trackingId polls GET /api/track/[id]
- Show statuses: Received → Assigned → On the way → In progress → Done
- Display mechanic info once Assigned

UI / Styling
- Dark gradient background
- Glass cards (`bg-white/5 border-white/10 backdrop-blur-xl rounded-2xl`)
- Buttons: gradient `from-emerald-500 via-sky-500 to-indigo-600`
- Animations: fade-up, stagger, slide transitions
- Mobile: sticky FAB + bottom drawer; Desktop: sidebar

────────────────────────
BACKEND (Express)
────────────────────────
Tech
- Node + Express (TypeScript)
- Middleware: Helmet, CORS, rate-limit
- Mock storage (SQLite or memory)

APIs
- POST /api/otp/send { phone } → { sessionId }
  - Validate phone, throttle
- POST /api/otp/verify { phone, sessionId, code } → { verified, otpToken? }
- POST /api/leads
  - Payload: vehicle, city, services, addons, estTotal, customer, address, otpToken
  - Validate city ∈ NCR
  - Assign slot automatically (system-determined)
  - Return { trackingId }
- GET /api/track/:id
  - Return status progression
- POST /api/waitlist { name, phone, city, email? } → { ok, id }

Validation
- Use Zod/express-validator
- India phone regex
- Reject non-NCR cities

────────────────────────
ACCEPTANCE
────────────────────────
- After selecting services, user immediately goes to location detection → details → OTP → booking.
- No manual slot selection; backend assigns slot automatically.
- Successful booking returns trackingId; user can track status.
- Works on mobile (drawer flow) and desktop (two-pane).
- NCR-only service; non-NCR users get Waitlist modal.
